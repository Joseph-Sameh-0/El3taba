    val productViewModel: MyProductsViewModel by viewModels()

//// Adding a category
//        val category = Category(
//            name = "jooo"
//        )
//        val categoryImageUri: Uri? = null // Your category image Uri
//        val addCategoryResult: LiveData<Boolean> = productViewModel.addCategory(category, categoryImageUri)

// Adding a subcategory
//        val subcategory = Subcategory(
//            name = "jooo sub"
//        )
//        val subcategoryImageUri: Uri? = null // Your subcategory image Uri
//        val categoryId = "NR4Y8i2wkzQd3vvpwp8r" // Your category ID
//        val addSubcategoryResult: LiveData<Boolean> = productViewModel.addSubcategory(subcategory, categoryId, subcategoryImageUri)

// Adding a product
//    val productViewModel: MyProductsViewModel by viewModels()
//
//    // Prepare static data for a Product
//    val product = Product(
//        id = "",  // ID will be auto-generated by Firestore
//        title = "joo Product",  // Title of the product
//        name = "kooo Product Name",  // Name of the product
//        description = "This is a joo product for testing.",  // Description of the product
//        stock = 100,  // Available stock count
//        price = 199.99,  // Price of the product
//        avgRating = 5f,  // Average rating
//        numberOfRatings = 25,  // Number of ratings
//        reviews = listOf(  // Sample reviews
//            Review(rating = 5F, comment = "Excellent product!jooo", reviewerName = "User1"),
//            Review(
//                rating = 4.5F,
//                comment = "Very good, but needs improvement.",
//                reviewerName = "User2"
//            )
//        ),
//        mfgDate = "2023-01-01",  // Manufacturing date
//        expDate = "2025-01-01",  // Expiration date
//        state = "New",  // State of the product (new or used)
//        seller = "Seller Name",  // Name of the seller
//        category = "Electronics",  // Product category
//        subcategory = "Mobile Phones",  // Product subcategory
//        imageUrl = "http://example.com/sample.jpg",  // URL of the product image
//        specs = mapOf(  // Specifications of the product
//            "Color" to "Black",
//            "Storage" to "128GB",
//            "Battery" to "4000mAh"
//        )
//    )
//        val productImageUri: Uri? = null // Your product image Uri
//        val subcategoryId = "1PvzgwRSSpFe2VP7DRMr" // Your subcategory ID
//        val categoryId = "Electronics" // Your subcategory ID
//
//        val addProductResult: LiveData<Boolean> =
//            productViewModel.addProduct(product, productImageUri, categoryId, subcategoryId)
//        // Observe the result of the addProduct function
//        addProductResult.observe(this, Observer { isSuccess ->
//            if (isSuccess) {
//                // Product added successfully
//                Log.d("productttt","Product added successfully!")
//            } else {
//                // Failed to add product
//                Log.d("productttt","Failed to add product.")
//            }
//        })

// get allcategories
//        productViewModel.getAllCategories().observe(this) { categories ->
//            // Update your UI with the list of categories
//            categories.forEach { category ->
//                Log.d("Category", "ID: ${category.id}, Name: ${category.name}, Image URL: ${category.imageUrl}")
//            }
//        }

// get allsubcategories
//        productViewModel.getSubcategories(categoryId).observe(this) { subcategories ->
//            // Update your UI with the list of subcategories
//            subcategories.forEach { subcategory ->
//                Log.d("Subcategory", "ID: ${subcategory.id}, Name: ${subcategory.name}, Image URL: ${subcategory.imageUrl}")
//            }
//        }

// get allproducts
//        productViewModel.getProducts(subcategoryId, categoryId).observe(this) { products ->
//            // Update your UI with the list of products
//            products.forEach { product ->
//                Log.d("Producttttt", "ID: ${product.id}, Name: ${product.name}, Price: ${product.price}, Stock: ${product.stock}, Image URL: ${product.imageUrl}")
//            }
//        }
        /////////////////////////////////
//change password
//    private val authViewModel: AuthViewModel by viewModels()

//        authViewModel.changePassword(currentPassword, newPassword).observe(this, Observer { success ->
//            if (success) {
//                Log.d("MainActivity", "Password changed successfully")
//            } else {
//                Log.d("MainActivity", "Failed to change password")
//            }
//        })


//get Random 10 Products
//        var viewModel = ViewModelProvider(this).get(MyProductsViewModel::class.java)
//
//        viewModel.getRandom10Products().observe(this) { products ->
//            // Log the fetched products
//            Log.d("MyProductsActivity", "Random Products: $products")
//        }